#!/usr/bin/env python3

import os
import ast
import argparse
import logging
import signal
import sys
import configparser

from socketIO_client import SocketIO, LoggingNamespace
from pathlib import Path

from gann.trader import Trader
from gann.trader_conditions import TraderConditions, TradingPair
from gann.offer import offer_bitcoin_de
from gann.broker_bitcoin_de import BrokerBitcoinDe

class LogHandler:
    def __init__(self, trader):
        self.offer_id = 0
        self.trader = trader
        print("") # Write deletes the last line which is the status line.
        # This way we make sure it does
        # not delete the line before the start of the run.

    def write(self, output):
        sys.stdout.write("\033[F\033[K")
        self.offer_id = self.offer_id + 1
        print("  %6i  %s" % (self.offer_id, output))
        print('Money: %.2f€, Coins: %f, Bought: %s' % (
            self.trader.money/100.0,
            sum(self.trader.depot.values()),
            ["%f for %.2f€" % (self.trader.depot[price], price/100.0)
             for price in self.trader.depot]
        ), sep='', end='')

class TraderRunner:
    """ Runs a trader and prints trading activity."""
    def __init__(self, traders, depot, log):
        if traders.size != depots.size:
            raise Error("Trader and depot sizes do not machts")
        self.traders = traders
        self.depot = depot

        logging.getLogger().addHandler(
            logging.StreamHandler(LogHandler(self.trader)))
        handler = logging.StreamHandler( log)
        handler.setFormatter(logging.Formatter(
            fmt='%(asctime)s %(levelname)-8s %(message)s',
            datefmt='%Y-%m-%d %H:%M:%S')
                             )

        logging.getLogger().addHandler(handler)

        logging.getLogger().setLevel(logging.INFO)

        self.running = True

    def add_order(self, *args):
        for i in range(len(self.traders)):
            trader = self.traders[i]
            depot = self.depot[i]
            trader.process_offer(offer_bitcoin_de(args[0]))
            depot.seek(0)
            depot.write(str({'money': self.trader.money,
                             'depot': self.trader.depot}))
        # flush everythin else if previously written depot was larger.
        self.depot.truncate()

    def remove_order(self, *args):
        pass

    def refresh_express_option(self, *args):
        pass

    def stop(self):
        """Stops the demo."""
        self.running = False

    def run(self):
        """ Runs the trader until stop() is calles."""
        target_socket = SocketIO('https://ws.bitcoin.de', 443, LoggingNamespace)
        target_socket.on('add_order', self.add_order)
        target_socket.on('remove_order', self.remove_order)
        target_socket.on('refresh_express_option', self.refresh_express_option)

        while self.running:
            target_socket.wait(seconds=2)

def main():
    parser = argparse.ArgumentParser(description="""A simple trading bot.""")

    parser.add_argument('--data', metavar='TRADER_DATA',
                        type=str,
                        nargs='?',
                        required=True,
                        help='Where to read config from and store depot and trading log.')

    parser.add_argument('--log-file', metavar='LOG_FILE',
                        type=argparse.FileType('a'),
                        nargs='?',
                        default='trader_log.json',
                        help='Where to append the logging.')

    args = parser.parse_args()
    config = configparser.ConfigParser()

    dataDir = Path(args.data)
    if not dataDir.exists():
        print("%s does not exists." % dataDir, file=sys.stderr)
        sys.exit(1)

    configFile = dataDir / "config.ini"
    if not configFile.exists():
        print("%s does not exists." % configFile, file=sys.stderr)
        sys.exit(1)

    tradingLogPath = dataDir / "trading.log"
    tradingLogFile = tradingLogPath.open(mode='a')
    if not tradingLogFile:
        print("Can not open '%s' for writing." % tradingLogPath, file=sys.stderr)
        sys.exit(1)

    config.read(configFile)

    if 'api_key' not in config['bitcoin.de']:
        print("No api_key entry for bitcoin.de in trader config file found. "
              "Exiting.", file=sys.stderr)
        sys.exit(1)

    if 'secret' not in config['bitcoin.de']:
        print("No secret entry for bitcoind.de in trader config file found. "
              "Exiting.", file=sys.stderr)
        sys.exit(1)

    broker_bitcoin_de = BrokerBitcoinDe(
        trading_log=tradingLogFile,
        api_key=config['bitcoin.de']['api_key'],
        secret=config['bitcoin.de']['secret'])

    traders = []
    depot_fiels = []

    for section in config:
        trader_conditions = TraderConditions(
            config.getint(section, 'amount_price', fallback=100_00),
            config.getint(section, 'amount_price_tolerance', fallback=20_00),
            config.getint(section, 'min_profit_price', fallback=10_00),
            config.getint(section, 'step_price', fallback=40_00),
            config.getint(section, 'turnaround_price', fallback=10_00),
        TradingPair(
            config.get(section, 'trading_pair', fallback='btceur')))

        depotPath = dataDir / (section+'_depot.json')
        if not depotPath.exists():
            print("%s does not exists." % depotPath, file=sys.stderr)
            sys.exit(1)

        depotFile = depotPath.open(mode='r+')
        if not depotFile:
            print("Can not open '%s' for writing." % depotPath, file=sys.stderr)
            sys.exit(1)

        start_data = ast.literal_eval(depotFile.read())
        start_money = start_data.get('money', 0.0)
        start_depot = start_data.get('depot', dict())

        traders.push(Trader(money=start_money,
                            depot=start_depot,
                            broker=broker_bitcoin_de,
                            conditions=trader_conditions))
        depots.push(depotFile)


    if traders.size() < 1:
        print("No trader specification found in \"%s\"" % config_file)
    runner = TraderRunner(traders=traders,
                          depots=depot_files,
                          log=args.log_file)

    runner.run()

    depotFile.close()
    tradingLogFile.close()
    args.log_file.close()
    print("\n\nStopped servus")

if __name__ == "__main__":
    main()
