#!/usr/bin/env python3

import ast
import argparse
import logging
import signal
import sys
import configparser

from socketIO_client import SocketIO, LoggingNamespace

from gann.trader import Trader
from gann.trader_conditions import TraderConditions, TradingPair
from gann.offer import offer_bitcoin_de
from gann.broker_bitcoin_de import BrokerBitcoinDe

class LogHandler:
    def __init__(self, trader):
        self.offer_id = 0
        self.trader = trader
        print("") # Write deletes the last line which is the status line.
        # This way we make sure it does
        # not delete the line before the start of the run.

    def write(self, output):
        sys.stdout.write("\033[F\033[K")
        self.offer_id = self.offer_id + 1
        print("  %6i  %s" % (self.offer_id, output))
        print('Money: %.2f€, Coins: %f, Bought: %s' % (
            self.trader.money/100.0,
            sum(self.trader.depot.values()),
            ["%f for %.2f€" % (self.trader.depot[price], price/100.0)
             for price in self.trader.depot]
        ), sep='', end='')

class TraderRunner:
    """ Runs a trader and prints trading activity."""
    def __init__(self, trader, depot, log):
        self.trader = trader
        self.depot = depot

        logging.getLogger().addHandler(
            logging.StreamHandler(LogHandler(self.trader)))
        logging.getLogger().addHandler(logging.StreamHandler(log))

        logging.getLogger().setLevel(logging.INFO)
        self.running = True

    def add_order(self, *args):
        self.trader.process_offer(offer_bitcoin_de(args[0]))
        self.depot.seek(0)
        self.depot.write(str({'money': self.trader.money,
                              'depot': self.trader.depot}))
        # flush everythin else if previously written depot was larger.
        self.depot.truncate()

    def remove_order(self, *args):
        pass

    def refresh_express_option(self, *args):
        pass

    def stop(self):
        """Stops the demo."""
        self.running = False

    def run(self):
        """ Runs the trader until stop() is calles."""
        target_socket = SocketIO('https://ws.bitcoin.de', 443, LoggingNamespace)
        target_socket.on('add_order', self.add_order)
        target_socket.on('remove_order', self.remove_order)
        target_socket.on('refresh_express_option', self.refresh_express_option)

        while self.running:
            target_socket.wait(seconds=2)

def main():
    parser = argparse.ArgumentParser(description="""A simple trading bot.""")

    parser.add_argument('--trader-config', metavar='TRADER_CONFIG_FILE',
                        type=argparse.FileType('r'),
                        nargs='?',
                        default='trader_config.ini',
                        help='Where to read the trader config from.')

    parser.add_argument('--trading-log', metavar='TRADING_FILE',
                        type=argparse.FileType('a'),
                        nargs='?',
                        default='trading_log.json',
                        help='Where to append the executed traders.')

    parser.add_argument('--log-file', metavar='LOG_FILE',
                        type=argparse.FileType('a'),
                        nargs='?',
                        default='trader_log.json',
                        help='Where to append the logging.')

    parser.add_argument('--depot', metavar='DEPOT_FILE',
                        type=argparse.FileType('r+'),
                        nargs='?',
                        default='depot.json',
                        help='Where to read and store the current depot.')

    args = parser.parse_args()
    config = configparser.ConfigParser()

    if not args.trader_config is None:
        config.read_string(args.trader_config.read())

    if 'api_key' not in config['bitcoin.de']:
        print("No api_key entry for bitcoin.de in trader config file found. "
              "Exiting.", file=sys.stderr)
        sys.exit(1)

    if 'secret' not in config['bitcoin.de']:
        print("No secret entry for bitcoind.de in trader config file found. "
              "Exiting.", file=sys.stderr)
        sys.exit(1)

    trader_conditions = TraderConditions(
        config.getint('CONDITIONS', 'amount_price', fallback=100_00),
        config.getint('CONDITIONS', 'amount_price_tolerance', fallback=20_00),
        config.getint('CONDITIONS', 'min_profit_price', fallback=10_00),
        config.getint('CONDITIONS', 'step_price', fallback=40_00),
        config.getint('CONDITIONS', 'turnaround_price', fallback=10_00),
        TradingPair(
            config.get('CONDITIONS', 'trading_pair', fallback='btceur')))

    init_depot = {}
    if not args.depot is None:
        init_depot = ast.literal_eval(args.depot.read())

    start_money = init_depot.get('money', 0.0)
    start_depot = init_depot.get('depot', dict())

    if start_money == 0.0 and not start_depot:
        print("No money and no depot specified, nothing to trade.\n",
              file=sys.stderr)
        parser.print_help()
        sys.exit(1)

    broker_bitcoin_de = BrokerBitcoinDe(
        trading_log=args.trading_log,
        api_key=config['bitcoin.de']['api_key'],
        secret=config['bitcoin.de']['secret'])

    trader = Trader(money=start_money,
                    depot=start_depot,
                    broker=broker_bitcoin_de,
                    conditions=trader_conditions)

    runner = TraderRunner(trader=trader,
                          depot=args.depot,
                          log=args.log_file)

    signal.signal(signal.SIGINT, lambda sig, frame: runner.stop())
    runner.run()

    args.depot.close()
    args.trading_log.close()
    args.log_file.close()
    print("\n\nStopped servus")


if __name__ == "__main__":
    main()
