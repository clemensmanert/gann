#!/usr/bin/env python3

import os
import ast
import argparse
import logging
import signal
import sys
import configparser

from socketIO_client import SocketIO, LoggingNamespace
from pathlib import Path

from gann.trader import Trader
from gann.trader_runner import TraderRunner
from gann.trader_conditions import TraderConditions
from gann.trading_pair import TradingPair
from gann.broker_bitcoin_de import BrokerBitcoinDe
from gann.offer import offer_bitcoin_de

def stop_trader():
    """Signals the TraderRunner to stop."""
    print(" Exit request occured, exiting...")
    global continue_trader
    continue_trader = False

def main():
    global continue_trader
    continue_trader = True

    signal.signal(signal.SIGINT, lambda signal, frame: stop_trader())

    parser = argparse.ArgumentParser(description="""A simple trading bot.""")

    parser.add_argument('data', metavar='TRADER_DATA',
                        type=str,
                        help="""Where to read config from and store depot and
                        trading log.""")

    args = parser.parse_args()
    tradersConfig = configparser.ConfigParser()

    dataDir = Path(args.data)
    if not dataDir.exists():
        print("%s does not exists." % dataDir, file=sys.stderr)
        sys.exit(1)

    tradersFile = dataDir / "traders.ini"
    if not tradersFile.exists():
        print("%s does not exists." % tradersFile, file=sys.stderr)
        sys.exit(1)
    tradersConfig.read(tradersFile)

    executedTradesPath = dataDir / "executed_trades.log"
    executedTradesFile = executedTradesPath.open(mode='a')
    if not executedTradesFile:
        print("Can not open '%s' for writing." % executedTradesPath,
              file=sys.stderr)
        sys.exit(1)

    logPath = dataDir / "gann.log"
    logFile = logPath.open(mode='a')
    if not logFile:
        print("Can not open '%s' for writing." % logPath, file=sys.stderr)
        sys.exit(1)

    if 'api_key' not in tradersConfig['DEFAULT']:
        print("No api_key entry for bitcoin.de in trader config file found. "
              "Exiting.", file=sys.stderr)
        sys.exit(1)

    if 'secret' not in tradersConfig['DEFAULT']:
        print("No secret entry for bitcoin.de in trader config file found. "
              "Exiting.", file=sys.stderr)
        sys.exit(1)

    broker_bitcoin_de = BrokerBitcoinDe(
        trading_log=executedTradesFile,
        api_key=tradersConfig['DEFAULT']['api_key'],
        secret=tradersConfig['DEFAULT']['secret'])

    traders = []
    depots = []

    for section in tradersConfig:
        if section == 'DEFAULT':
            continue
        trader_conditions = TraderConditions(
            tradersConfig.getint(section, 'amount_price', fallback=100_00),
            tradersConfig.getint(section, 'amount_price_tolerance',
                                 fallback=20_00),
            tradersConfig.getint(section, 'min_profit_price', fallback=10_00),
            tradersConfig.getint(section, 'step_price', fallback=40_00),
            tradersConfig.getint(section, 'turnaround_price', fallback=10_00),
        TradingPair(
            tradersConfig.get(section, 'trading_pair', fallback='btceur')))

        depotPath = dataDir / (section+'_depot.json')
        if not depotPath.exists():
            print("%s does not exists." % depotPath, file=sys.stderr)
            sys.exit(1)

        depotFile = depotPath.open(mode='r+')
        if not depotFile:
            print("Can not open '%s' for writing." % depotPath, file=sys.stderr)
            sys.exit(1)

        start_data = ast.literal_eval(depotFile.read())
        start_money = start_data.get('money', 0.0)
        start_depot = start_data.get('depot', dict())

        traders.append(Trader(money=start_money,
                            depot=start_depot,
                            broker=broker_bitcoin_de,
                            conditions=trader_conditions))
        depots.append(depotFile)

    if not any(traders):
        print("No trader specification found in \"%s\"" % config_file)

    runner = TraderRunner(traders=traders,
                          depots=depots,
                          log=logFile)

    target_socket = SocketIO('https://ws.bitcoin.de', 443, LoggingNamespace)
    target_socket.on('add_order', lambda o: runner.add_order(
        offer_bitcoin_de(o)))
    target_socket.on('remove_order', runner.remove_order)
    target_socket.on('refresh_express_option', runner.refresh_express_option)

    while continue_trader:
        try:
            target_socket.wait(seconds=3)
            # Make sure executed trades gets actually written once in a while
            # Because if the trader gets stopped without the possibilty to
            # flush, the file might be empty.
            executedTradesFile.flush()
        except Exception as e:
            print("Caught exception %s shutting down" % e, file=sys.stderr)
            continue_reader = False
            executedTradesFile.flush()

    executedTradesFile.flush()
    executedTradesFile.close()
    logFile.close()

    for depotFile in depots:
        depotFile.close()

    print("\n\n Tear down successfull")

if __name__ == "__main__":
    main()
